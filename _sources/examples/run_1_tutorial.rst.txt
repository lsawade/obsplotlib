
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/run_1_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_run_1_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_run_1_tutorial.py:


Full Obsplotlib Tutorial
========================

The tutorial will go over the plotting functions in ``obsplotlib`` and how to
prepare your data to plot traces, station seismograms and full seismic sections
using ``obsplotlib``. Here and there the tutorial will digress into some
matplotlib details, to show how you could easily customize the plots to your
liking.


Loading all modules
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 18-24

.. code-block:: default


    import numpy as np
    import obspy
    import obsplotlib.plot as opl
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 27-30

Loading data
------------


.. GENERATED FROM PYTHON SOURCE LINES 31-35

.. code-block:: default

    event = obspy.read_events("DATA/CMTSOLUTION")[0]
    raw = obspy.read("DATA/observed/traces/*.sac")
    inv = obspy.read_inventory("DATA/observed/station.xml")








.. GENERATED FROM PYTHON SOURCE LINES 36-38

Before plotting anything let's get some information about the event and the
station and process the data

.. GENERATED FROM PYTHON SOURCE LINES 38-46

.. code-block:: default


    # Get event latitude and longitude for geometry evaluation
    event_time = event.preferred_origin().time
    event_latitude = event.preferred_origin().latitude
    event_longitude = event.preferred_origin().longitude
    event_depth = event.preferred_origin().depth  # in meters
    event_name = 'C' + event.preferred_origin().resource_id.id.split('/')[-2]








.. GENERATED FROM PYTHON SOURCE LINES 47-48

Attach the event station geometry to the traces, important for rotation to RTZ

.. GENERATED FROM PYTHON SOURCE LINES 48-52

.. code-block:: default


    opl.attach_geometry(raw, event_latitude=event_latitude,
                        event_longitude=event_longitude, inv=inv)








.. GENERATED FROM PYTHON SOURCE LINES 53-54

Processing the data very generically

.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: default

    bandpass = [30, 200]
    obs = opl.process(raw, inv=inv, remove_response=True, bandpass=bandpass)








.. GENERATED FROM PYTHON SOURCE LINES 58-64

Trace
-----

First let's inspect the trace plotting function. It is in a way a wrapper
around the matplotlib plot function but with some added functionality to grab
info from the stats object and plot it in a "nice" way.

.. GENERATED FROM PYTHON SOURCE LINES 64-74

.. code-block:: default


    # Select a trace
    network_str, station_str, component_str = "II", "BFO", "Z"
    tr = obs.select(network=network_str, station=station_str,
                    component=component_str)[0]

    plt.figure()
    ax = opl.trace(tr, plot_labels=True, lw=0.5)
    plt.show(block=False)




.. image-sg:: /examples/images/sphx_glr_run_1_tutorial_001.svg
   :alt: run 1 tutorial
   :srcset: /examples/images/sphx_glr_run_1_tutorial_001.svg
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 75-77

Since we have both station and event information in the stats object we can
add a header to the figure to be a little more explicit.

.. GENERATED FROM PYTHON SOURCE LINES 77-103

.. code-block:: default


    plt.figure(figsize=(8, 3))
    ax = opl.trace(tr, plot_labels=False, origin_time=event_time, lw=0.5)

    header_dict = dict(
        station=f'{tr.id}',
        station_latitude=tr.stats.latitude,
        station_longitude=tr.stats.longitude,
        station_azimuth=tr.stats.azimuth,
        station_back_azimuth=tr.stats.back_azimuth,
        station_distance_in_degree=tr.stats.distance,
        event=event_name,
        event_latitude=event_latitude,
        event_longitude=event_longitude,
        event_depth_in_km=event_depth/1000.0,
        event_time=event_time,
        add_newline_station=True,
        add_newline_event=True,
        bandpass=bandpass,
        fontsize='medium'
    )

    opl.add_header(ax, **header_dict)
    plt.subplots_adjust(left=0.05, right=0.95, top=0.725, bottom=0.15)
    plt.show(block=False)




.. image-sg:: /examples/images/sphx_glr_run_1_tutorial_002.svg
   :alt: run 1 tutorial
   :srcset: /examples/images/sphx_glr_run_1_tutorial_002.svg
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 104-135

In the example above we are providing all possible arguments to the
``add_header`` function just for show. Depending on whether they are provided
they will be added to the header or not. The header is a simple text object
and all font related arguments are passed through ``plot_label`` and to
``plt.text()``. The ``add_newline_station`` and ``add_newline_event`` arguments
Simply add a newline and a space after the station name and event name.

.. note::

    Digression: At this point you probably already noticed how I'm using
    a monospace font. You may adjust this to your liking by changing the
    ``plt.rcParams["font.family"]`` parameter, e.g

    .. code:: python

        plt.rcParams["font.family"] = "Arial"

    Monospace is a personal preference of mine, because it makes it easier to
    align the header and the labels. But it is not the most beautiful font.
    Especially, if you are comparing traces and plot labels that contain
    numbers, it is simpler to compare numbers if they are aligned. Anywho
    I will enable it for the next section before switching back to monospace.

Station
-------

The next function is the station function. Instead of plotting a single trace
it will plot a set of components in a single figure. It's a wrapper around the
plot trace function, so most arguments are parsed to the trace function. The
The components are defined by a keyword argument. So you may use ``ZRT``
``NEZ`` or ``123`` or just two, ``RT``, for example.

.. GENERATED FROM PYTHON SOURCE LINES 135-159

.. code-block:: default


    # Switching font to Arial
    plt.rcParams["font.family"] = "Arial"

    # Get station from observed trace
    st = obs.select(network="II", station="BFO")

    # Plot the station
    plt.figure(figsize=(8, 5))
    axes = opl.station(st, components='ZRT', lw=0.5)

    # If dissatisfied with legend fontsize and position? Just recreate it using
    # the first axes object.
    axes[0].legend(frameon=False, loc='lower right', ncol=3, fontsize='small',
                   bbox_to_anchor=(1.0, 1.0))

    # Add the header with a bit more distance to make room for the legend outside
    # the  axes
    opl.add_header(axes[0], **header_dict, dist=0.075)

    # Slightly adjust the plots to make the fit nicely into the figure
    plt.subplots_adjust(left=0.075, right=0.925, top=0.775, bottom=0.15)
    plt.show(block=False)




.. image-sg:: /examples/images/sphx_glr_run_1_tutorial_003.svg
   :alt: run 1 tutorial
   :srcset: /examples/images/sphx_glr_run_1_tutorial_003.svg
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 160-180

Putting the legend outside the axes is nice when we are plotting multiple
traces to compare them. But if we are only plotting a single stream, it is
nicer to plot the legend inside the axes. Because it removes some unused
white space.

Section
-------

Plotting a section should be simple. And obspy does make it fairly easy, but
the moment you want to plot a section with multiple components, or align
traces it becomes fairly complicated. ``obsplotlib`` is trying to streamline
these processes, by using some function to add properties to the stats object
of the traces and then using these properties to plot the section. We actually
already did this earlier in the tutorial when we used
``opl.attach_geometry(...)`` to attach the station coordinates to the stats.
If you don't have a stationxml file, you can use opl.attach_geometry(...)
after attaching station coordinates to the traces' stats objects, or manually
add distance, (and optionally, azimuth, and back_azimuth for labels)
to the stats object. To save space in the section, traces are not plotting by
their actual distance, but one by one with a label that has the distance.

.. GENERATED FROM PYTHON SOURCE LINES 180-191

.. code-block:: default


    # Switching back to monospace
    plt.rcParams["font.family"] = "monospace"

    plt.figure(figsize=(8, 10))
    opl.section(obs, lw=0.5, comp='T')
    plt.legend(frameon=False, loc='upper right', ncol=3, fontsize='small')
    plt.subplots_adjust(left=0.15, right=0.85, top=0.95, bottom=0.05)
    plt.show(block=False)





.. image-sg:: /examples/images/sphx_glr_run_1_tutorial_004.svg
   :alt: run 1 tutorial
   :srcset: /examples/images/sphx_glr_run_1_tutorial_004.svg
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[0.0024505997585772816, 0.001574379603044935, 0.0034862554498077862, 0.0008669836693182409, 0.0012316358557313669, 0.0034692072260754806, 0.00045049464682523016, 0.0019141582446365148, 0.001712866024974609, 0.006028308625859601, 0.003178954145711804, 0.0014389197046787085, 0.0018913556818178337, 0.0019865869491995734, 0.002635682348778954, 0.002674076510788794, 0.0026444151335401336]]




.. GENERATED FROM PYTHON SOURCE LINES 192-194

Plotting the same section but with axis limits from 300 seconds to 1500 seconds
after the event

.. GENERATED FROM PYTHON SOURCE LINES 194-204

.. code-block:: default

    starttime = event_time + 600
    endtime = event_time + 3600
    limits = [starttime, endtime]

    plt.figure(figsize=(8, 10))
    opl.section(obs, limits=limits, lw=0.5)
    plt.subplots_adjust(left=0.15, right=0.85, top=0.95, bottom=0.05)
    plt.show(block=False)





.. image-sg:: /examples/images/sphx_glr_run_1_tutorial_005.svg
   :alt: run 1 tutorial
   :srcset: /examples/images/sphx_glr_run_1_tutorial_005.svg
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[0.0020310921642309986, 0.0010257692358382614, 0.001983981210650028, 0.0013267483860925798, 0.0017255150466662214, 0.0016511777441700994, 0.0030876538450560465, 0.0013512138886367432, 0.0014211126947204448, 0.002014548801327227, 0.0013739496815176441, 0.00023638277804639374, 0.00020274114030764014, 0.00019168378969858078, 0.0005016897992049631, 0.0003863219400469282, 0.0007487967017329957]]




.. GENERATED FROM PYTHON SOURCE LINES 205-207

Plotting the same section but with the origin time defined so that we get
Time since event origin on the x-axis.

.. GENERATED FROM PYTHON SOURCE LINES 207-213

.. code-block:: default


    plt.figure(figsize=(8, 10))
    opl.section(obs, origin_time=event_time, lw=0.5)
    plt.subplots_adjust(left=0.15, right=0.85, top=0.95, bottom=0.05)
    plt.show(block=False)




.. image-sg:: /examples/images/sphx_glr_run_1_tutorial_006.svg
   :alt: run 1 tutorial
   :srcset: /examples/images/sphx_glr_run_1_tutorial_006.svg
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[0.0020310921642309986, 0.0010257692358382614, 0.001983981210650028, 0.0013267483860925798, 0.0017255150466662214, 0.0016511777441700994, 0.0030876538450560465, 0.0013512138886367432, 0.0014211126947204448, 0.002014548801327227, 0.0013739496815176441, 0.0009117332787971929, 0.0005526138063811933, 0.0012934679077098888, 0.0014582299649838087, 0.002119008990522608, 0.002125903901535755]]




.. GENERATED FROM PYTHON SOURCE LINES 214-217

Again plotting the same section but now with the origin time defined so that we
get Time since event origin on the x-axis and with axis limits from 300 seconds
to 1500 seconds after the event

.. GENERATED FROM PYTHON SOURCE LINES 217-224

.. code-block:: default


    limits = [600, 3600]
    plt.figure(figsize=(8, 10))
    opl.section(obs, origin_time=event_time, limits=limits, lw=0.5)
    plt.subplots_adjust(left=0.15, right=0.85, top=0.95, bottom=0.05)
    plt.show(block=False)




.. image-sg:: /examples/images/sphx_glr_run_1_tutorial_007.svg
   :alt: run 1 tutorial
   :srcset: /examples/images/sphx_glr_run_1_tutorial_007.svg
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[0.0020310921642309986, 0.0010257692358382614, 0.001983981210650028, 0.0013267483860925798, 0.0017255150466662214, 0.0016511777441700994, 0.0030876538450560465, 0.0013512138886367432, 0.0014211126947204448, 0.002014548801327227, 0.0013739496815176441, 0.00023638277804639374, 0.00020274114030764014, 0.00019168378969858078, 0.0005016897992049631, 0.0003863219400469282, 0.0007487967017329957]]




.. GENERATED FROM PYTHON SOURCE LINES 225-228

Next we are going to plot an aligned sections. To do this each trace must have
a obspy.Trace.stats.traveltime parameter. This can be done using the
add_traveltime function or manually using your own function.

.. GENERATED FROM PYTHON SOURCE LINES 228-232

.. code-block:: default


    obs_filtered = opl.add_traveltime(obs, phase='love', orbit=1,
                                      return_filtered=True, vlove=6.5)








.. GENERATED FROM PYTHON SOURCE LINES 233-236

Note that the add traveltime function uses the TauPy model by default for
body waves and fixed velocity for surface waves. The traveltimes are then
computed using the distance parameter in the stats object.

.. GENERATED FROM PYTHON SOURCE LINES 238-245

.. code-block:: default

    plt.figure(figsize=(8, 10))
    opl.section(obs_filtered, origin_time=event_time, lw=0.5, align=True,
                comp='T')
    plt.subplots_adjust(left=0.15, right=0.85, top=0.95, bottom=0.05)
    plt.show(block=False)





.. image-sg:: /examples/images/sphx_glr_run_1_tutorial_008.svg
   :alt: run 1 tutorial
   :srcset: /examples/images/sphx_glr_run_1_tutorial_008.svg
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[0.0024505997585772816, 0.001574379603044935, 0.0034862554498077862, 0.0008669836693182409, 0.0012316358557313669, 0.0034692072260754806, 0.00045049464682523016, 0.0019141582446365148, 0.001712866024974609, 0.006028308625859601, 0.003178954145711804, 0.0014389197046787085, 0.0018913556818178337, 0.0019865869491995734, 0.002635682348778954, 0.002674076510788794, 0.0026444151335401336]]




.. GENERATED FROM PYTHON SOURCE LINES 246-249

Now this does not make a lot of sense since the traces are not aligned at the
start. Conveniently we can set the limits parameter to only plot a certain
time range before and after the arrival times.

.. GENERATED FROM PYTHON SOURCE LINES 249-258

.. code-block:: default


    limits = [-500, 500]

    plt.figure(figsize=(6, 10))
    opl.section(obs_filtered, origin_time=event_time, limits=limits, lw=0.5,
                align=True, comp='T')
    plt.subplots_adjust(left=0.25, right=0.8, top=0.95, bottom=0.05)
    plt.show(block=False)




.. image-sg:: /examples/images/sphx_glr_run_1_tutorial_009.svg
   :alt: run 1 tutorial
   :srcset: /examples/images/sphx_glr_run_1_tutorial_009.svg
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[0.0024505997585772816, 0.0012767136298588678, 0.00104853307345953, 0.0006091300019544863, 0.0002571998120610813, 0.00048242447337560354, 0.00020127603656706975, 0.0003074609888726817, 0.0002552381701421307, 0.0006551659733019955, 0.0003770037293277743, 0.0005516896255325048, 0.0004015282169721006, 0.0003854706270344753, 0.00039110647686225124, 0.0002788232881691158, 0.0005119379234385056]]




.. GENERATED FROM PYTHON SOURCE LINES 259-260

Let's also plot a section aligned to the P arrival times.

.. GENERATED FROM PYTHON SOURCE LINES 260-273

.. code-block:: default


    obs_filtered = opl.add_traveltime(obs, event_depth_in_m=event_depth, phase='P',
                                      origin_time=event_time,
                                      return_filtered=True, vlove=3.7)
    limits = [-100, 150]

    plt.figure(figsize=(8, 6))
    ax, ax2 = opl.section(obs_filtered, origin_time=event_time, limits=limits, lw=0.5,
                          align=True)
    ax.plot([0, 0], [-0.5, len(obs_filtered) + 0.5], 'k--', lw=0.5)
    plt.subplots_adjust(left=0.15, right=0.85, top=0.95, bottom=0.1)
    plt.show(block=False)




.. image-sg:: /examples/images/sphx_glr_run_1_tutorial_010.svg
   :alt: run 1 tutorial
   :srcset: /examples/images/sphx_glr_run_1_tutorial_010.svg
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[0.00016538255213666348, 5.519750832211496e-05, 9.9452679689026e-05, 8.868830268138597e-05, 0.00012870453127058373, 6.839569881138807e-05, 8.119057923157647e-05]]




.. GENERATED FROM PYTHON SOURCE LINES 274-283

Note that we have fewer traces here because some land in the Pwave shadow zone
and are not recorded but seismographs. Also note, that ax, and ax2 give you
axes to the left and right yaxes. ax and ax2 ticks actually set the left and
right y axes labels. So far we have only plotted a single
component (Z) in the section. ``obsplotlib`` also has a function to plot
multiple components in a single section. This is done using the
``opl.section_multiple_comp`` function. This function takes the same arguments
But insted of being a single letter string, the components argument is a
string with all components to be plotted in order.

.. GENERATED FROM PYTHON SOURCE LINES 283-294

.. code-block:: default


    plt.figure(figsize=(9, 5))
    axes = opl.section_multiple_comp(obs_filtered, origin_time=event_time,
                                     limits=limits, lw=0.5, align=True,
                                     components="ZRT")
    for ax, _ in axes:
        ax.plot([0, 0], [-0.5, len(obs_filtered) + 0.5], 'k--', lw=0.5)

    plt.subplots_adjust(left=0.15, right=0.85, top=0.95, bottom=0.05, wspace=0.75)
    plt.show(block=False)




.. image-sg:: /examples/images/sphx_glr_run_1_tutorial_011.svg
   :alt: run 1 tutorial
   :srcset: /examples/images/sphx_glr_run_1_tutorial_011.svg
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[0.00016538255213666348, 5.519750832211496e-05, 9.9452679689026e-05, 8.868830268138597e-05, 0.00012870453127058373, 6.839569881138807e-05, 8.119057923157647e-05]]
    [[0.00019458408556125568, 2.934906965917464e-05, 5.0188914866007917e-05, 4.9184553831081936e-05, 6.322671228778273e-05, 2.4140425798115153e-05, 3.7130343789894805e-05]]
    2 legendargs
    [[3.338864985276305e-05, 5.002313404158561e-06, 5.223139727360008e-06, 3.4678735519461123e-06, 1.0908791501773577e-05, 2.9317280004807354e-06, 1.0448378338137199e-05]]




.. GENERATED FROM PYTHON SOURCE LINES 295-307

One main difference is that the section multiple components will find an
absmax to normalize across all streams and traces. This can be overwritten by
absmax parameter which can be manually set.


Trace comparison
----------------

So far we have only really looked at a single set of traces. Very often in
seismology however we want to look at trace comparisons. And sometimes
directly looks at measurements on traces, or windows. Let's load a second
set of traces to compare our observed data too.

.. GENERATED FROM PYTHON SOURCE LINES 307-312

.. code-block:: default


    # Read traces and station info
    synraw = obspy.read("DATA/synthetic/traces/*.sac")
    syninv = obspy.read_inventory("DATA/synthetic/station.xml")








.. GENERATED FROM PYTHON SOURCE LINES 313-314

Just like with the observed data we are attach geometry for rotation

.. GENERATED FROM PYTHON SOURCE LINES 314-318

.. code-block:: default

    opl.attach_geometry(synraw, event_latitude=event_latitude,
                        event_longitude=event_longitude, inv=syninv)









.. GENERATED FROM PYTHON SOURCE LINES 319-321

Since we want to process both synthetics and observed the same fashion,
We have to resample the traces in addition to the basic processing.

.. GENERATED FROM PYTHON SOURCE LINES 321-334

.. code-block:: default


    starttime = event_time
    npts = 10800
    sampling_rate_in_hz = 1
    bandpass = [40, 500]
    obs = opl.process(raw, inv=inv, remove_response=True, bandpass=bandpass,
                      starttime=starttime, npts=npts,
                      sampling_rate_in_hz=1)

    syn = opl.process(synraw, inv=inv, remove_response=False, bandpass=bandpass,
                      starttime=starttime, npts=npts,
                      sampling_rate_in_hz=1)








.. GENERATED FROM PYTHON SOURCE LINES 335-336

Once both are processed we can plot them with

.. GENERATED FROM PYTHON SOURCE LINES 336-354

.. code-block:: default


    obstr = obs.select(network=network_str, station=station_str,
                       component=component_str)[0]
    syntr = syn.select(network=network_str, station=station_str,
                       component=component_str)[0]

    plt.figure()
    ax = opl.trace([obstr, syntr], labels=['Observed', 'GLAD-M25'],
                   origin_time=event_time, lw=0.75)

    # Just reusing the header dict from earlier
    header_dict['station'] = obstr.id
    header_dict['bandpass'] = bandpass

    opl.add_header(ax, **header_dict)
    plt.subplots_adjust(left=0.05, right=0.95, top=0.8, bottom=0.125)
    plt.show(block=False)




.. image-sg:: /examples/images/sphx_glr_run_1_tutorial_012.svg
   :alt: run 1 tutorial
   :srcset: /examples/images/sphx_glr_run_1_tutorial_012.svg
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 355-356

Repeat to plot a station

.. GENERATED FROM PYTHON SOURCE LINES 356-379

.. code-block:: default


    # Get station from observed trace
    obs_st = obs.select(network="II", station="BFO")
    syn_st = syn.select(network="II", station="BFO")

    # Plot the station
    plt.figure(figsize=(8, 5))
    axes = opl.station([obs_st, syn_st], components='ZRT', lw=0.5,
                       labels=['Observed', 'GLAD-M25'], nooffset=True)

    # If dissatisfied with legend fontsize and position? Just recreate it using
    # the first axes object.
    axes[0].legend(frameon=False, loc='lower right', ncol=3, fontsize='small',
                   bbox_to_anchor=(1.0, 1.0))

    # Add the header with a bit more distance to make room for the legend outside
    # the  axes
    opl.add_header(axes[0], **header_dict, dist=0.075)

    # Slightly adjust the plots to make the fit nicely into the figure
    plt.subplots_adjust(left=0.075, right=0.925, top=0.775, bottom=0.15)
    plt.show(block=False)




.. image-sg:: /examples/images/sphx_glr_run_1_tutorial_013.svg
   :alt: run 1 tutorial
   :srcset: /examples/images/sphx_glr_run_1_tutorial_013.svg
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 380-382

For the section, we need do a couple more things. The set of traces in these
do not perfectly overlapping.

.. GENERATED FROM PYTHON SOURCE LINES 382-385

.. code-block:: default


    streams = opl.select_intersection([obs, syn], components='ZRT')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    list index out of range
    Cant find G.SPB..Z
    list index out of range
    Cant find G.SPB..R
    list index out of range
    Cant find G.SPB..T
    list index out of range
    Cant find IU.LSZ..Z
    list index out of range
    Cant find IU.LSZ..R
    list index out of range
    Cant find IU.LSZ..T
    list index out of range
    Cant find MN.TNV..Z
    list index out of range
    Cant find MN.TNV..R
    list index out of range
    Cant find MN.TNV..T
    list index out of range
    Cant find IU.HNR..Z
    list index out of range
    Cant find IU.HNR..R
    list index out of range
    Cant find IU.HNR..T
    list index out of range
    Cant find II.RAYN..Z
    list index out of range
    Cant find II.RAYN..R
    list index out of range
    Cant find II.RAYN..T
    list index out of range
    Cant find IU.RCBR..Z
    list index out of range
    Cant find IU.RCBR..R
    list index out of range
    Cant find IU.RCBR..T
    list index out of range
    Cant find IU.TRQA..Z
    list index out of range
    Cant find IU.TRQA..R
    list index out of range
    Cant find IU.TRQA..T
    list index out of range
    Cant find IU.YSS..Z
    list index out of range
    Cant find IU.YSS..R
    list index out of range
    Cant find IU.YSS..T
    list index out of range
    Cant find II.KAPI..Z
    list index out of range
    Cant find II.KAPI..R
    list index out of range
    Cant find II.KAPI..T
    list index out of range
    Cant find II.SUR..Z
    list index out of range
    Cant find II.SUR..R
    list index out of range
    Cant find II.SUR..T
    list index out of range
    Cant find G.TRIS..Z
    list index out of range
    Cant find G.TRIS..R
    list index out of range
    Cant find G.TRIS..T
    list index out of range
    Cant find IU.CHTO..Z
    list index out of range
    Cant find IU.CHTO..R
    list index out of range
    Cant find IU.CHTO..T
    list index out of range
    Cant find IU.INCN..Z
    list index out of range
    Cant find IU.INCN..R
    list index out of range
    Cant find IU.INCN..T
    list index out of range
    Cant find IU.SAML..Z
    list index out of range
    Cant find IU.SAML..R
    list index out of range
    Cant find IU.SAML..T
    list index out of range
    Cant find G.FUTU..Z
    list index out of range
    Cant find G.FUTU..R
    list index out of range
    Cant find G.FUTU..T
    list index out of range
    Cant find IU.OTAV..Z
    list index out of range
    Cant find IU.OTAV..R
    list index out of range
    Cant find IU.OTAV..T
    list index out of range
    Cant find II.PALK..Z
    list index out of range
    Cant find II.PALK..R
    list index out of range
    Cant find II.PALK..T
    list index out of range
    Cant find IC.XAN..Z
    list index out of range
    Cant find IC.XAN..R
    list index out of range
    Cant find IC.XAN..T
    list index out of range
    Cant find G.PAF..Z
    list index out of range
    Cant find G.PAF..R
    list index out of range
    Cant find G.PAF..T
    list index out of range
    Cant find G.IVI..Z
    list index out of range
    Cant find G.IVI..R
    list index out of range
    Cant find G.IVI..T
    list index out of range
    Cant find II.NIL..Z
    list index out of range
    Cant find II.NIL..R
    list index out of range
    Cant find II.NIL..T
    list index out of range
    Cant find IU.ANTO..Z
    list index out of range
    Cant find IU.ANTO..R
    list index out of range
    Cant find IU.ANTO..T
    list index out of range
    Cant find IU.SBA..Z
    list index out of range
    Cant find IU.SBA..R
    list index out of range
    Cant find IU.SBA..T
    list index out of range
    Cant find II.ABPO..Z
    list index out of range
    Cant find II.ABPO..R
    list index out of range
    Cant find II.ABPO..T
    list index out of range
    Cant find G.MPG..Z
    list index out of range
    Cant find G.MPG..R
    list index out of range
    Cant find G.MPG..T
    list index out of range
    Cant find IU.MAKZ..Z
    list index out of range
    Cant find IU.MAKZ..R
    list index out of range
    Cant find IU.MAKZ..T
    list index out of range
    Cant find IU.WVT..Z
    list index out of range
    Cant find IU.WVT..R
    list index out of range
    Cant find IU.WVT..T
    list index out of range
    Cant find II.BORG..Z
    list index out of range
    Cant find II.BORG..R
    list index out of range
    Cant find II.BORG..T
    list index out of range
    Cant find II.TLY..Z
    list index out of range
    Cant find II.TLY..R
    list index out of range
    Cant find II.TLY..T
    list index out of range
    Cant find IU.PMSA..Z
    list index out of range
    Cant find IU.PMSA..R
    list index out of range
    Cant find IU.PMSA..T
    list index out of range
    Cant find IU.KOWA..Z
    list index out of range
    Cant find IU.KOWA..R
    list index out of range
    Cant find IU.KOWA..T
    list index out of range
    Cant find IU.NWAO..Z
    list index out of range
    Cant find IU.NWAO..R
    list index out of range
    Cant find IU.NWAO..T
    list index out of range
    Cant find II.ARU..Z
    list index out of range
    Cant find II.ARU..R
    list index out of range
    Cant find II.ARU..T
    list index out of range
    Cant find GE.KMBO..Z
    list index out of range
    Cant find GE.KMBO..R
    list index out of range
    Cant find GE.KMBO..T
    list index out of range
    Cant find G.ROCAM..Z
    list index out of range
    Cant find G.ROCAM..R
    list index out of range
    Cant find G.ROCAM..T
    list index out of range
    Cant find G.NOUC..Z
    list index out of range
    Cant find G.NOUC..R
    list index out of range
    Cant find G.NOUC..T
    list index out of range
    Cant find II.ALE..Z
    list index out of range
    Cant find II.ALE..R
    list index out of range
    Cant find II.ALE..T
    list index out of range
    Cant find II.MSEY..Z
    list index out of range
    Cant find II.MSEY..R
    list index out of range
    Cant find II.MSEY..T
    list index out of range
    Cant find II.TAU..Z
    list index out of range
    Cant find II.TAU..R
    list index out of range
    Cant find II.TAU..T
    list index out of range
    Cant find IU.MAJO..Z
    list index out of range
    Cant find IU.MAJO..R
    list index out of range
    Cant find IU.MAJO..T
    list index out of range
    Cant find II.COCO..Z
    list index out of range
    Cant find II.COCO..R
    list index out of range
    Cant find II.COCO..T
    list index out of range
    Cant find IU.COR..Z
    list index out of range
    Cant find IU.COR..R
    list index out of range
    Cant find IU.COR..T
    list index out of range
    Cant find IU.CASY..Z
    list index out of range
    Cant find IU.CASY..R
    list index out of range
    Cant find IU.CASY..T
    list index out of range
    Cant find IU.MIDW..Z
    list index out of range
    Cant find IU.MIDW..R
    list index out of range
    Cant find IU.MIDW..T
    list index out of range
    Cant find IU.TIXI..Z
    list index out of range
    Cant find IU.TIXI..R
    list index out of range
    Cant find IU.TIXI..T
    list index out of range
    Cant find II.CMLA..Z
    list index out of range
    Cant find II.CMLA..R
    list index out of range
    Cant find II.CMLA..T
    list index out of range
    Cant find II.AAK..Z
    list index out of range
    Cant find II.AAK..R
    list index out of range
    Cant find II.AAK..T
    list index out of range
    Cant find II.ASCN..Z
    list index out of range
    Cant find II.ASCN..R
    list index out of range
    Cant find II.ASCN..T
    list index out of range
    Cant find GE.LVC..Z
    list index out of range
    Cant find GE.LVC..R
    list index out of range
    Cant find GE.LVC..T
    list index out of range
    Cant find II.FFC..Z
    list index out of range
    Cant find II.FFC..R
    list index out of range
    Cant find II.FFC..T
    list index out of range
    Cant find II.KWJN..Z
    list index out of range
    Cant find II.KWJN..R
    list index out of range
    Cant find II.KWJN..T
    list index out of range
    Cant find II.SACV..Z
    list index out of range
    Cant find II.SACV..R
    list index out of range
    Cant find II.SACV..T
    list index out of range
    Cant find IU.ADK..Z
    list index out of range
    Cant find IU.ADK..R
    list index out of range
    Cant find IU.ADK..T
    list index out of range
    Cant find IU.YAK..Z
    list index out of range
    Cant find IU.YAK..R
    list index out of range
    Cant find IU.YAK..T
    list index out of range
    Cant find II.LVZ..Z
    list index out of range
    Cant find II.LVZ..R
    list index out of range
    Cant find II.LVZ..T
    list index out of range
    Cant find IU.GUMO..Z
    list index out of range
    Cant find IU.GUMO..R
    list index out of range
    Cant find IU.GUMO..T
    list index out of range
    Cant find IU.KONO..Z
    list index out of range
    Cant find IU.KONO..R
    list index out of range
    Cant find IU.KONO..T
    list index out of range
    Cant find IU.MSKU..Z
    list index out of range
    Cant find IU.MSKU..R
    list index out of range
    Cant find IU.MSKU..T
    list index out of range
    Cant find IU.SJG..Z
    list index out of range
    Cant find IU.SJG..R
    list index out of range
    Cant find IU.SJG..T
    list index out of range
    Cant find IU.TEIG..Z
    list index out of range
    Cant find IU.TEIG..R
    list index out of range
    Cant find IU.TEIG..T
    list index out of range
    Cant find G.KIP..Z
    list index out of range
    Cant find G.KIP..R
    list index out of range
    Cant find G.KIP..T
    list index out of range
    Cant find II.RPN..Z
    list index out of range
    Cant find II.RPN..R
    list index out of range
    Cant find II.RPN..T
    list index out of range
    Cant find G.ECH..Z
    list index out of range
    Cant find G.ECH..R
    list index out of range
    Cant find G.ECH..T
    list index out of range
    Cant find G.PPTF..Z
    list index out of range
    Cant find G.PPTF..R
    list index out of range
    Cant find G.PPTF..T
    list index out of range
    Cant find IU.SPA..Z
    list index out of range
    Cant find IU.SPA..R
    list index out of range
    Cant find IU.SPA..T
    list index out of range
    Cant find G.TAM..Z
    list index out of range
    Cant find G.TAM..R
    list index out of range
    Cant find G.TAM..T




.. GENERATED FROM PYTHON SOURCE LINES 386-388

Now that we have selected only the traces that are in all streams, we can
plot a section with the traces.

.. GENERATED FROM PYTHON SOURCE LINES 388-396

.. code-block:: default


    plt.figure(figsize=(8, 10))
    opl.section(streams, origin_time=event_time, lw=0.5,
                labels=['Observed', 'GLAD-M25'])
    plt.subplots_adjust(left=0.15, right=0.85, top=0.95, bottom=0.05)
    plt.show(block=False)





.. image-sg:: /examples/images/sphx_glr_run_1_tutorial_014.svg
   :alt: run 1 tutorial
   :srcset: /examples/images/sphx_glr_run_1_tutorial_014.svg
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[0.002743187661132795, 0.00219715452262896, 0.0014256783021462304, 0.0022499778402648514, 0.003818495470623282, 0.001631694111054505, 0.002642893139688799, 0.0018508093530368377, 0.0015391092284538662, 0.002128403387366918], [0.005993899763920346, 0.0024470425442413533, 0.0012458114041164683, 0.00405182421513302, 0.005487683286779865, 0.002123495738556396, 0.003336863761592863, 0.0029469907263877377, 0.0023977613864230862, 0.0034373540232758783]]




.. GENERATED FROM PYTHON SOURCE LINES 397-410

Windows
-------

Often we select windows on traces to measure misfit, cross-correlation times
and more. ``obsplotlib`` has a function to plot windows on traces with labels
of such measurements. The measurements are stored in a list of
``obsplotlib.Window``'s under trace.stats.windows. The window object has a
measurement attribute which contains a dictionary with labels of the traces
to compare it to which in turn is a dictionary of the actual measurements
Let's see what that means in an example.

First we need to select a window on a trace. We can do this using the
add traveltime function from earlier and selecting a window around the arrival

.. GENERATED FROM PYTHON SOURCE LINES 411-415

.. code-block:: default


    obs_filtered = opl.add_traveltime(obs, event_depth_in_m=event_depth, phase='S',
                                      origin_time=event_time, return_filtered=True)








.. GENERATED FROM PYTHON SOURCE LINES 416-419

In traces before 30dg, the S arrival window seems to be unclear wrt.
following surfaces waves. So we will only use traces with a distance
greater than 35dg.

.. GENERATED FROM PYTHON SOURCE LINES 419-429

.. code-block:: default


    obs_list = []
    for tr in obs_filtered:
        if tr.stats.distance < 35:
            pass
        else:
            obs_list.append(tr)

    obs_filtered = obspy.Stream(obs_list)








.. GENERATED FROM PYTHON SOURCE LINES 430-433

Now to make our life a little easier there is a function to copy specific
parameters from one trace to another. In this case we want to copy the
traveltime

.. GENERATED FROM PYTHON SOURCE LINES 433-443

.. code-block:: default


    # Select intersection of the observed traces with P traveltime and the synthetic
    # traces
    obs_filtered, syn_filtered = opl.select_intersection([obs_filtered, syn],
                                                         components='ZRT')

    # Copy the traveltime from the observed to the synthetic traces
    opl.copy_trace_param(obs_filtered, syn_filtered, 'traveltime')
    opl.copy_trace_param(obs_filtered, syn_filtered, 'origin_time')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    list index out of range
    Cant find G.SPB..Z
    list index out of range
    Cant find G.SPB..R
    list index out of range
    Cant find G.SPB..T
    list index out of range
    Cant find IU.LSZ..Z
    list index out of range
    Cant find IU.LSZ..R
    list index out of range
    Cant find IU.LSZ..T
    list index out of range
    Cant find MN.TNV..Z
    list index out of range
    Cant find MN.TNV..R
    list index out of range
    Cant find MN.TNV..T
    list index out of range
    Cant find IU.HNR..Z
    list index out of range
    Cant find IU.HNR..R
    list index out of range
    Cant find IU.HNR..T
    list index out of range
    Cant find II.RAYN..Z
    list index out of range
    Cant find II.RAYN..R
    list index out of range
    Cant find II.RAYN..T
    list index out of range
    Cant find IU.RCBR..Z
    list index out of range
    Cant find IU.RCBR..R
    list index out of range
    Cant find IU.RCBR..T
    list index out of range
    Cant find IU.TRQA..Z
    list index out of range
    Cant find IU.TRQA..R
    list index out of range
    Cant find IU.TRQA..T
    list index out of range
    Cant find IU.YSS..Z
    list index out of range
    Cant find IU.YSS..R
    list index out of range
    Cant find IU.YSS..T
    list index out of range
    Cant find II.SUR..Z
    list index out of range
    Cant find II.SUR..R
    list index out of range
    Cant find II.SUR..T
    list index out of range
    Cant find IU.CTAO..Z
    list index out of range
    Cant find IU.CTAO..R
    list index out of range
    Cant find IU.CTAO..T
    list index out of range
    Cant find G.TRIS..Z
    list index out of range
    Cant find G.TRIS..R
    list index out of range
    Cant find G.TRIS..T
    list index out of range
    Cant find II.KDAK..Z
    list index out of range
    Cant find II.KDAK..R
    list index out of range
    Cant find II.KDAK..T
    list index out of range
    Cant find IU.CHTO..Z
    list index out of range
    Cant find IU.CHTO..R
    list index out of range
    Cant find IU.CHTO..T
    list index out of range
    Cant find IU.INCN..Z
    list index out of range
    Cant find IU.INCN..R
    list index out of range
    Cant find IU.INCN..T
    list index out of range
    Cant find IU.SAML..Z
    list index out of range
    Cant find IU.SAML..R
    list index out of range
    Cant find IU.SAML..T
    list index out of range
    Cant find G.FUTU..Z
    list index out of range
    Cant find G.FUTU..R
    list index out of range
    Cant find G.FUTU..T
    list index out of range
    Cant find IU.OTAV..Z
    list index out of range
    Cant find IU.OTAV..R
    list index out of range
    Cant find IU.OTAV..T
    list index out of range
    Cant find II.HOPE..Z
    list index out of range
    Cant find II.HOPE..R
    list index out of range
    Cant find II.HOPE..T
    list index out of range
    Cant find II.PALK..Z
    list index out of range
    Cant find II.PALK..R
    list index out of range
    Cant find II.PALK..T
    list index out of range
    Cant find IC.XAN..Z
    list index out of range
    Cant find IC.XAN..R
    list index out of range
    Cant find IC.XAN..T
    list index out of range
    Cant find G.PAF..Z
    list index out of range
    Cant find G.PAF..R
    list index out of range
    Cant find G.PAF..T
    list index out of range
    Cant find G.IVI..Z
    list index out of range
    Cant find G.IVI..R
    list index out of range
    Cant find G.IVI..T
    list index out of range
    Cant find II.NIL..Z
    list index out of range
    Cant find II.NIL..R
    list index out of range
    Cant find II.NIL..T
    list index out of range
    Cant find IU.ANTO..Z
    list index out of range
    Cant find IU.ANTO..R
    list index out of range
    Cant find IU.ANTO..T
    list index out of range
    Cant find IU.SBA..Z
    list index out of range
    Cant find IU.SBA..R
    list index out of range
    Cant find IU.SBA..T
    list index out of range
    Cant find II.ABPO..Z
    list index out of range
    Cant find II.ABPO..R
    list index out of range
    Cant find II.ABPO..T
    list index out of range
    Cant find G.MPG..Z
    list index out of range
    Cant find G.MPG..R
    list index out of range
    Cant find G.MPG..T
    list index out of range
    Cant find IU.MAKZ..Z
    list index out of range
    Cant find IU.MAKZ..R
    list index out of range
    Cant find IU.MAKZ..T
    list index out of range
    Cant find IU.WVT..Z
    list index out of range
    Cant find IU.WVT..R
    list index out of range
    Cant find IU.WVT..T
    list index out of range
    Cant find II.TLY..Z
    list index out of range
    Cant find II.TLY..R
    list index out of range
    Cant find II.TLY..T
    list index out of range
    Cant find IU.PMSA..Z
    list index out of range
    Cant find IU.PMSA..R
    list index out of range
    Cant find IU.PMSA..T
    list index out of range
    Cant find IU.DAV..Z
    list index out of range
    Cant find IU.DAV..R
    list index out of range
    Cant find IU.DAV..T
    list index out of range
    Cant find IU.KOWA..Z
    list index out of range
    Cant find IU.KOWA..R
    list index out of range
    Cant find IU.KOWA..T
    list index out of range
    Cant find IU.NWAO..Z
    list index out of range
    Cant find IU.NWAO..R
    list index out of range
    Cant find IU.NWAO..T
    list index out of range
    Cant find II.ARU..Z
    list index out of range
    Cant find II.ARU..R
    list index out of range
    Cant find II.ARU..T
    list index out of range
    Cant find GE.KMBO..Z
    list index out of range
    Cant find GE.KMBO..R
    list index out of range
    Cant find GE.KMBO..T
    list index out of range
    Cant find G.ROCAM..Z
    list index out of range
    Cant find G.ROCAM..R
    list index out of range
    Cant find G.ROCAM..T
    list index out of range
    Cant find G.NOUC..Z
    list index out of range
    Cant find G.NOUC..R
    list index out of range
    Cant find G.NOUC..T
    list index out of range
    Cant find II.ALE..Z
    list index out of range
    Cant find II.ALE..R
    list index out of range
    Cant find II.ALE..T
    list index out of range
    Cant find II.MSEY..Z
    list index out of range
    Cant find II.MSEY..R
    list index out of range
    Cant find II.MSEY..T
    list index out of range
    Cant find II.TAU..Z
    list index out of range
    Cant find II.TAU..R
    list index out of range
    Cant find II.TAU..T
    list index out of range
    Cant find II.COCO..Z
    list index out of range
    Cant find II.COCO..R
    list index out of range
    Cant find II.COCO..T
    list index out of range
    Cant find IU.COR..Z
    list index out of range
    Cant find IU.COR..R
    list index out of range
    Cant find IU.COR..T
    list index out of range
    Cant find IU.CASY..Z
    list index out of range
    Cant find IU.CASY..R
    list index out of range
    Cant find IU.CASY..T
    list index out of range
    Cant find IU.MIDW..Z
    list index out of range
    Cant find IU.MIDW..R
    list index out of range
    Cant find IU.MIDW..T
    list index out of range
    Cant find IU.TIXI..Z
    list index out of range
    Cant find IU.TIXI..R
    list index out of range
    Cant find IU.TIXI..T
    list index out of range
    Cant find II.CMLA..Z
    list index out of range
    Cant find II.CMLA..R
    list index out of range
    Cant find II.CMLA..T
    list index out of range
    Cant find II.DGAR..Z
    list index out of range
    Cant find II.DGAR..R
    list index out of range
    Cant find II.DGAR..T
    list index out of range
    Cant find II.ASCN..Z
    list index out of range
    Cant find II.ASCN..R
    list index out of range
    Cant find II.ASCN..T
    list index out of range
    Cant find GE.LVC..Z
    list index out of range
    Cant find GE.LVC..R
    list index out of range
    Cant find GE.LVC..T
    list index out of range
    Cant find II.FFC..Z
    list index out of range
    Cant find II.FFC..R
    list index out of range
    Cant find II.FFC..T
    list index out of range
    Cant find II.KWJN..Z
    list index out of range
    Cant find II.KWJN..R
    list index out of range
    Cant find II.KWJN..T
    list index out of range
    Cant find II.SACV..Z
    list index out of range
    Cant find II.SACV..R
    list index out of range
    Cant find II.SACV..T
    list index out of range
    Cant find IU.ADK..Z
    list index out of range
    Cant find IU.ADK..R
    list index out of range
    Cant find IU.ADK..T
    list index out of range
    Cant find IU.MSKU..Z
    list index out of range
    Cant find IU.MSKU..R
    list index out of range
    Cant find IU.MSKU..T
    list index out of range
    Cant find II.LVZ..Z
    list index out of range
    Cant find II.LVZ..R
    list index out of range
    Cant find II.LVZ..T
    list index out of range
    Cant find II.BFO..Z
    list index out of range
    Cant find II.BFO..R
    list index out of range
    Cant find II.BFO..T
    list index out of range
    Cant find IU.GUMO..Z
    list index out of range
    Cant find IU.GUMO..R
    list index out of range
    Cant find IU.GUMO..T
    list index out of range
    Cant find IU.KONO..Z
    list index out of range
    Cant find IU.KONO..R
    list index out of range
    Cant find IU.KONO..T
    list index out of range
    Cant find IU.SJG..Z
    list index out of range
    Cant find IU.SJG..R
    list index out of range
    Cant find IU.SJG..T
    list index out of range
    Cant find IU.TEIG..Z
    list index out of range
    Cant find IU.TEIG..R
    list index out of range
    Cant find IU.TEIG..T
    list index out of range
    Cant find G.KIP..Z
    list index out of range
    Cant find G.KIP..R
    list index out of range
    Cant find G.KIP..T
    list index out of range
    Cant find II.RPN..Z
    list index out of range
    Cant find II.RPN..R
    list index out of range
    Cant find II.RPN..T
    list index out of range
    Cant find G.ECH..Z
    list index out of range
    Cant find G.ECH..R
    list index out of range
    Cant find G.ECH..T
    list index out of range
    Cant find G.PPTF..Z
    list index out of range
    Cant find G.PPTF..R
    list index out of range
    Cant find G.PPTF..T
    list index out of range
    Cant find IU.SPA..Z
    list index out of range
    Cant find IU.SPA..R
    list index out of range
    Cant find IU.SPA..T
    list index out of range
    Cant find G.TAM..Z
    list index out of range
    Cant find G.TAM..R
    list index out of range
    Cant find G.TAM..T




.. GENERATED FROM PYTHON SOURCE LINES 444-445

Let's first plot these traces in a panel to see what we are working with

.. GENERATED FROM PYTHON SOURCE LINES 445-474

.. code-block:: default


    plt.figure(figsize=(9, 5))
    limits = -200, 250
    axes = opl.section_multiple_comp([obs_filtered, syn_filtered],
                                     origin_time=event_time,
                                     labels=['Observed', 'GLAD-M25'],
                                     limits=limits, lw=0.5, align=True,
                                     components="ZRT")

    # Add a vertical line at 0 seconds and modify labels
    for _i, (ax, _) in enumerate(axes):
        ax.plot([0, 0], [-0.5, len(obs_filtered) + 0.5], 'k--', lw=0.5)
        if _i == 1:
            ax.set_xlabel('Offset from P arrival [s]')
        else:
            ax.set_xlabel('')

    # Add legend to
    axes[2][0].legend(frameon=False, loc='lower right', ncol=3, fontsize='small',
                      bbox_to_anchor=(1.0, 1.0))

    # Add header with event info
    opl.add_header(axes[0][0],
                   event=event_name, event_time=event_time,
                   event_latitude=event_latitude, event_longitude=event_longitude,
                   event_depth_in_km=event_depth/1000.0, dist=0.075)
    plt.subplots_adjust(left=0.15, right=0.85, top=0.9, bottom=0.1, wspace=0.75)
    plt.show(block=False)




.. image-sg:: /examples/images/sphx_glr_run_1_tutorial_015.svg
   :alt: run 1 tutorial
   :srcset: /examples/images/sphx_glr_run_1_tutorial_015.svg
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[0.00043633959929839563, 0.00020448526450415425, 0.00042656153197850535, 0.0006455207333116463], [0.0004135726125294305, 0.00029381812579423836, 0.0007501182163931972, 0.0010359891685168387]]
    [[0.0016980154896035992, 0.0010636520817336652, 0.0016136762343113837, 0.003049387903641918], [0.0016891928446583523, 0.0013129425429092556, 0.002479644832544455, 0.002977535635952327]]
    2 legendargs
    [[0.0008915771646592599, 0.0005116767359316616, 0.0004926222127364147, 0.0002101515028380593], [0.0013209157414376042, 0.0009799776478217283, 0.000931475682878813, 0.0003947648168670685]]




.. GENERATED FROM PYTHON SOURCE LINES 475-476

Now we can select a window on the observed trace.

.. GENERATED FROM PYTHON SOURCE LINES 476-484

.. code-block:: default


    for tr in obs_filtered:
        # Create a window object
        tr.stats.windows = [opl.Window(
            tr,
            starttime=tr.stats.origin_time + tr.stats.traveltime + limits[0],
            endtime=tr.stats.origin_time + tr.stats.traveltime + limits[1])]








.. GENERATED FROM PYTHON SOURCE LINES 485-489

Given the window on the observed trace we can now make some measurements.
This we abbreviate to calling the convenience function ``make_measurements``.
``make_measurements`` will make a measurement for each window on each trace
and add it to the window object.

.. GENERATED FROM PYTHON SOURCE LINES 489-492

.. code-block:: default


    opl.make_measurements(obs_filtered, syn_filtered, label='M25')








.. GENERATED FROM PYTHON SOURCE LINES 493-521

The measurements attribute is a dictionary with the following structure:

.. code:: python

    window.measurements = {
        'label1': {
            'L2': <normalized L2 norm>,
            'Xmx'= <cc max>,
            'DT'= <timeshift>,
            'XR'= <cc_ratio>
        },
        'label2': {
            ...
        }
    }

.. note::

    It's important to note here that the measurement labels are not
    fixed in the plotting functions but rather grabbed from this dictionary.
    So you can add your own measurements to the dictionary and plot
    them. Simply add a dictionary or an AttribDict to the
    trace.stats.windows[idx].measurements dictionary with the label as key
    and the measurement dictionary as value.


Now that we have windows and some measurements we can plot them using any
of the previous methods. Let's plot them as trace first

.. GENERATED FROM PYTHON SOURCE LINES 521-541

.. code-block:: default


    network_str = 'IU'
    station_str = 'HRV'
    component_str = 'Z'
    stationtr = obs_filtered.select(network=network_str, station=station_str)[0]

    headerdict = dict(
        station=f'{network_str}.{station_str}',
        station_latitude=stationtr.stats.latitude,
        station_longitude=stationtr.stats.longitude,
        station_azimuth=stationtr.stats.azimuth,
        station_distance_in_degree=stationtr.stats.distance,
        station_back_azimuth=stationtr.stats.back_azimuth,
        event=event_name,
        event_latitude=event_latitude,
        event_longitude=event_longitude,
        event_depth_in_km=event_depth/1000.0,
        bandpass=bandpass,
    )








.. GENERATED FROM PYTHON SOURCE LINES 542-543

Grab only the Z component

.. GENERATED FROM PYTHON SOURCE LINES 543-560

.. code-block:: default

    obstr = obs_filtered.select(network=network_str, station=station_str,
                                component=component_str)[0]
    syntr = syn_filtered.select(network=network_str, station=station_str,
                                component=component_str)[0]

    # Now, let's plot a full station plot the station
    plt.figure(figsize=(8, 5))
    ax = opl.trace([obstr, syntr], lw=0.5, window=True,
                   labels=['Observed', 'GLAD-M25'], nooffset=True,
                   limits=(500, 3250),
                   origin_time=event_time)

    opl.add_header(ax, **headerdict, dist=0.025)
    # Slightly adjust the plots to make the fit nicely into the figure
    plt.subplots_adjust(left=0.075, right=0.925, top=0.775, bottom=0.15)
    plt.show(block=False)




.. image-sg:: /examples/images/sphx_glr_run_1_tutorial_016.svg
   :alt: run 1 tutorial
   :srcset: /examples/images/sphx_glr_run_1_tutorial_016.svg
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 561-562

Now, let's plot a full station, so let's grab all station traces

.. GENERATED FROM PYTHON SOURCE LINES 562-580

.. code-block:: default

    obsst = obs_filtered.select(network=network_str, station=station_str)
    synst = syn_filtered.select(network=network_str, station=station_str)

    #
    plt.figure(figsize=(8, 5))
    axes = opl.station([obsst, synst], components='ZRT', lw=0.5, window=True,
                       labels=['Observed', 'GLAD-M25'], nooffset=True,
                       origin_time=event_time,
                       limits=(15.0*60.0, 30.0*60.0)
                       )

    opl.add_header(axes[0], **headerdict, dist=0.025)

    # Slightly adjust the plots to make the fit nicely into the figure
    plt.subplots_adjust(left=0.075, right=0.925, top=0.775, bottom=0.15)
    plt.show(block=False)





.. image-sg:: /examples/images/sphx_glr_run_1_tutorial_017.svg
   :alt: run 1 tutorial
   :srcset: /examples/images/sphx_glr_run_1_tutorial_017.svg
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 581-594

.. code-block:: default


    # Plot the station
    plt.figure(figsize=(8, 5))
    axes = opl.section([obs_filtered, syn_filtered],
                       comp='Z', lw=0.5, window=True, limits=(500, 3250),
                       labels=['Observed', 'GLAD-M25'],
                       origin_time=event_time)

    opl.add_header(axes[0], **headerdict, dist=0.025)
    # Slightly adjust the plots to make the fit nicely into the figure
    plt.subplots_adjust(left=0.15, right=0.85, top=0.9, bottom=0.1)
    plt.show(block=False)




.. image-sg:: /examples/images/sphx_glr_run_1_tutorial_018.svg
   :alt: run 1 tutorial
   :srcset: /examples/images/sphx_glr_run_1_tutorial_018.svg
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[0.00219715452262896, 0.0014256783021462304, 0.0022499778402648514, 0.003818495470623282], [0.0024470425442413533, 0.0012458114041164683, 0.00405182421513302, 0.005487683286779865]]




.. GENERATED FROM PYTHON SOURCE LINES 595-600

Now let's turn back to a single trace, and plot the window on it. So,
far we have only plotted the extent of the trace and the window. But we
can also plot the measurements on the window. To do this we have to parse
a dictionary to the kwarg ``windowkwargs`` with the key
plot_measurements=True.

.. GENERATED FROM PYTHON SOURCE LINES 600-616

.. code-block:: default


    obstr = obs_filtered.select(network=network_str, station=station_str,
                                component=component_str)[0]
    syntr = syn_filtered.select(network=network_str, station=station_str,
                                component=component_str)[0]

    plt.figure(figsize=(8, 4.25))
    ax = opl.trace([obstr, syntr], labels=['Observed', 'GLAD-M25'],
                   limits=(500, 3250),
                   origin_time=event_time, lw=0.75,
                   window=True, nooffset=True,
                   windowkwargs=dict(plot_measurements=True))
    opl.add_header(ax, **headerdict, dist=0.025)
    plt.show(block=False)





.. image-sg:: /examples/images/sphx_glr_run_1_tutorial_019.svg
   :alt: run 1 tutorial
   :srcset: /examples/images/sphx_glr_run_1_tutorial_019.svg
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 617-621

Finally let's add a second set of traces to the plot. This time we will
use amplitude measurements we made earlier to find an amplitude correction
factor and apply it to the synthetic traces to make them match the observed
slightly better. Then, we make measurements again and plot them.

.. GENERATED FROM PYTHON SOURCE LINES 621-636

.. code-block:: default


    # Copy the synthetics
    newsyn = syn_filtered.copy()

    # Get factor
    factor = np.mean([window.measurements['M25']['XR']
                     for _tr in obs_filtered for window in _tr.stats.windows])

    # Correct new synthetics
    for tr in newsyn:
        tr.data *= factor

    # Make measurements
    opl.make_measurements(obs_filtered, newsyn, label='M25C')








.. GENERATED FROM PYTHON SOURCE LINES 637-639

Now we plot the measurements on Z and R components of the station with
both the windows and the measurements. That we added to the windows

.. GENERATED FROM PYTHON SOURCE LINES 639-658

.. code-block:: default


    # Subselect streams
    obsst = obs_filtered.select(network=network_str, station=station_str)
    synst = syn_filtered.select(network=network_str, station=station_str)
    newsynst = newsyn.select(network=network_str, station=station_str)


    plt.figure(figsize=(8, 5))
    ax = opl.station([obsst, synst, newsynst], labels=['Observed', 'M25', 'M25C'],
                     limits=(500, 3250), components='ZR',
                     origin_time=event_time, lw=0.75,
                     window=True, nooffset=True,
                     windowkwargs=dict(
                         plot_measurements=True,
                         text_kwargs=dict(fontsize='x-small'))
                     )
    opl.add_header(ax[0], **headerdict, dist=0.025)
    plt.show(block=False)




.. image-sg:: /examples/images/sphx_glr_run_1_tutorial_020.svg
   :alt: run 1 tutorial
   :srcset: /examples/images/sphx_glr_run_1_tutorial_020.svg
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 659-665

In doing this we have more or less performed a small inversion. If we optimize
for the sources scalar moment, M0, considering all S arrivals, simply perform
a scaling. By finding all time-shifted correlation ratios between observed
and synthetic data we find the amplitude that best fits the data, but
disregard the phase. This is a very simple inversion, but it is a good example
For showing measurements on traces and windows.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 12.531 seconds)


.. _sphx_glr_download_examples_run_1_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: run_1_tutorial.py <run_1_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: run_1_tutorial.ipynb <run_1_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
